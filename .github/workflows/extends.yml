name: Extend Trakt Data

on:
  schedule:
    - cron: "0 5 * * 5"
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Force update all entries (ignore cache)'
        required: false
        default: false
        type: boolean
  push:
    paths:
      - "main.go"

jobs:
  extend-data:
    runs-on: ubuntu-latest
    permissions:
      # Required to push changes to the repository and create a release
      contents: write

    # Define environment variables at the job level for reusability
    env:
      TRAKT_API_KEY: ${{ secrets.TRAKT_API_KEY }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      # fetch-depth: 0 is necessary to compare with the previous commit
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: go mod tidy

    - name: Download source data
      run: |
        curl -fsSL -o tv.json https://raw.githubusercontent.com/rensetsu/db.trakt.anitrakt/main/db/tv.json
        curl -fsSL -o movies.json https://raw.githubusercontent.com/rensetsu/db.trakt.anitrakt/main/db/movies.json
        echo "Downloaded TV data: $(wc -l < tv.json) lines"
        echo "Downloaded Movies data: $(wc -l < movies.json) lines"

    - name: Process Trakt data
      run: |
        # Construct arguments for the Go application
        ARGS="--api-key ${TRAKT_API_KEY} --verbose --no-progress"
        DAY_OF_MONTH=$(date +%d)

        # Force update on the first and third Friday of the month, or if manually triggered
        if [[ ${{ github.event.inputs.force_update }} == true ]] || \
           [[ "${{ github.event_name }}" == "schedule" && ( ( $DAY_OF_MONTH -ge 1 && $DAY_OF_MONTH -le 7 ) || ( $DAY_OF_MONTH -ge 15 && $DAY_OF_MONTH -le 21 ) ) ]]; then
          ARGS+=" --force"
        fi

        echo "Processing TV shows..."
        go run main.go --tv tv.json --output tv_ex.json $ARGS
        
        echo "Processing movies..."
        go run main.go --movies movies.json --output movies_ex.json $ARGS

    - name: Generate update timestamp
      run: echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC')" > last_updated.txt

    - name: Detect data changes and gather stats
      id: check_changes
      run: |
        # Use git status to check for any modifications to the data files
        if git status --porcelain tv_ex.json movies_ex.json not_exist_*.json | grep .; then
          echo "Data changes detected."
          echo "data_changed=true" >> $GITHUB_OUTPUT
        else
          echo "No data changes detected."
          echo "data_changed=false" >> $GITHUB_OUTPUT
        fi

        # Gather stats for the commit message and release notes
        echo "tv_count=$(jq length tv_ex.json)" >> $GITHUB_OUTPUT
        echo "movies_count=$(jq length movies_ex.json)" >> $GITHUB_OUTPUT

    - name: Commit, Push, and Release
      if: steps.check_changes.outputs.data_changed == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "Committing changes and creating a new release..."
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

        # Add all generated files. This is safe because the runner environment is clean.
        git add tv_ex.json movies_ex.json last_updated.txt not_exist_*.json

        # Create a detailed commit message using a HEREDOC
        COMMIT_MSG=$(cat << EOF
        feat: Update Trakt extended data

        - TV shows: ${{ steps.check_changes.outputs.tv_count }} entries
        - Movies: ${{ steps.check_changes.outputs.movies_count }} entries
        - Updated: $(cat last_updated.txt)

        Auto-generated by GitHub Actions.
        EOF
        )
        git commit -m "$COMMIT_MSG"
        git push

        # Create detailed release notes using a HEREDOC for readability
        RELEASE_NOTES=$(cat << EOF
        # Trakt Extended Data - $(cat last_updated.txt)

        ## 📊 Statistics
        - **TV Shows**: ${{ steps.check_changes.outputs.tv_count }} entries
        - **Movies**: ${{ steps.check_changes.outputs.movies_count }} entries
        - **Last Updated**: $(cat last_updated.txt)

        ## 📁 Files
        - `tv_ex.json` - Extended TV shows data
        - `movies_ex.json` - Extended movies data
        - `last_updated.txt` - Timestamp of this update
        $([ -f "not_exist_tv_ex.json" ] && echo "- `not_exist_tv_ex.json` - TV shows not found on Trakt")
        $([ -f "not_exist_movies_ex.json" ] && echo "- `not_exist_movies_ex.json` - Movies not found on Trakt")
        EOF
        )

        # Create a list of asset files to upload
        ASSET_FILES="tv_ex.json movies_ex.json last_updated.txt"
        [ -f "not_exist_tv_ex.json" ] && ASSET_FILES+=" not_exist_tv_ex.json"
        [ -f "not_exist_movies_ex.json" ] && ASSET_FILES+=" not_exist_movies_ex.json"

        # Delete old release and create a new one to keep the 'latest' tag updated
        gh release delete latest --yes || echo "No 'latest' release found to delete."
        gh release create latest \
          --title "Latest Trakt Extended Data" \
          --notes "$RELEASE_NOTES" \
          --latest \
          $ASSET_FILES

    - name: Update Timestamp Only
      if: steps.check_changes.outputs.data_changed == 'false'
      run: |
        echo "Data is unchanged. Updating timestamp to record activity."
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add last_updated.txt
        # Check if the timestamp file itself has changed before committing
        if ! git diff --staged --quiet; then
          git commit -m "chore: Update timestamp"
          git push
        else
          echo "Timestamp file is also unchanged. Nothing to commit."
        fi

  test-local:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
    
    - name: Install jq for testing
      run: sudo apt-get update && sudo apt-get install -y jq
    
    - name: Test with sample data
      run: |
        # Create minimal test data
        echo '[{"title":"Test Show","mal_id":1,"trakt_id":1390,"guessed_slug":"test","season":1,"type":"shows"}]' > test_tv.json
        echo '[{"title":"Test Movie","mal_id":2,"trakt_id":1,"guessed_slug":"test","type":"movies"}]' > test_movies.json
        
        # Test the application (will fail due to dummy key, but tests structure)
        echo "Testing TV processing..."
        go run main.go --tv test_tv.json --verbose --no-progress --api-key "dummy_key" || echo "Expected failure with dummy API key"
        
        echo "Testing Movies processing..."
        go run main.go --movies test_movies.json --verbose --no-progress --api-key "dummy_key" || echo "Expected failure with dummy API key"
        
        echo "Application structure test completed"
